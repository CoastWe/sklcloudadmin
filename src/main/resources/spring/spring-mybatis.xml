<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx.xsd
     http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop.xsd">

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />

		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="20" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。 如果validationQuery为null，testOnBorrow、testOnReturn、 
			testWhileIdle都不会其作用。 -->
		<property name="validationQuery" value="SELECT 1" />
		<!-- 申请连接时执行validationQuery检测连接是否有效， 做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="false" />
		<!-- 连接池最大使用连接数量 -->
		<property name="testOnReturn" value="false" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis， 
			执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
	    <property name="filters" value="stat" /> 
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:com/skl/cloud/**/*.xml" />
		<property name="plugins">
			<array>
      			<bean class="com.github.pagehelper.PageHelper">
      			
      				<property name="properties">
      					<value>
      				<!-- 该参数默认为false -->
			        <!-- 设置为true时，会将RowBounds第一个参数offset当成pageNum页码使用 -->
			        <!-- 和startPage中的pageNum效果一样-->
      						offsetAsPageNum=true
      				<!-- 该参数默认为false -->
			        <!-- 设置为true时，使用RowBounds分页会进行count查询 -->
      						rowBoundsWithCount=true
      				<!-- 设置为true时，如果pageSize=0或者RowBounds.limit = 0就会查询出全部的结果 -->
			        <!-- （相当于没有执行分页查询，但是返回结果仍然是Page类型）-->
      						pageSizeZero=true
			        <!-- 3.3.0版本可用 - 分页参数合理化，默认false禁用 -->
			        <!-- 启用合理化时，如果pageNum<1会查询第一页，如果pageNum>pages会查询最后一页 -->
			        <!-- 禁用合理化时，如果pageNum<1或pageNum>pages会返回空数据 -->      						
      						reasonable=false
			        <!-- 3.5.0版本可用 - 为了支持startPage(Object params)方法 -->
			        <!-- 增加了一个`params`参数来配置参数映射，用于从Map或ServletRequest中取值 -->
			        <!-- 可以配置pageNum,pageSize,count,pageSizeZero,reasonable,orderBy,不配置映射的用默认值 -->
			        <!-- 不理解该含义的前提下，不要随便复制该配置 -->
      						params=pageNum=pageHelperStart;pageSize=pageHelperRows;
			        <!-- 支持通过Mapper接口参数来传递分页参数 -->      						
      						supportMethodsArguments=false
			        <!-- always总是返回PageInfo类型,check检查返回类型是否为PageInfo,none返回Page -->
			        		returnPageInfo=none
      					</value>
      				</property>
      			</bean>
    		</array>
		</property>
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.skl.cloud.admin.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- a PlatformTransactionManager is still required -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- (this dependency is defined somewhere else) -->
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- enable the configuration of transactional behavior based on annotations -->
	<tx:annotation-driven transaction-manager="txManager" />


</beans>